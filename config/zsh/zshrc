#!/usr/bin/env zsh
# zmodload zsh/zprof
export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME="robbyrussell"
DISABLE_AUTO_UPDATE="true"
DISABLE_UNTRACKED_FILES_DIRTY="true"

ZSH_TMUX_DEFAULT_SESSION_NAME="dev"
ZSH_TMUX_FIXTERM=false
# to check for updates once a month
UPDATE_ZSH_DAYS=30
# or to check for updates daily
UPDATE_ZSH_DAYS=1

export PATH="$HOME/bin:$HOME/.local/bin:$PATH"

if [ -d ~/.zshconf/pre ]
then
    for file in ~/.zshconf/pre/*; do
        source "$file"
    done
fi

if [[ "$TERM_PROGRAM" == "ghostty" ]]; then
    export TERM=xterm-256color
fi

plugins=( 
    autoupdate
    common-aliases 
    cp
    docker-compose
    fzf 
    git 
    golang
    gpg-agent
    kubectl
    node
    npm
    rsync
    rust
    systemd
    tmux
    uv
    web-search
    yarn
    zoxide
    zsh-completions
    zsh-syntax-highlighting
)

# user config
source $ZSH/oh-my-zsh.sh

if [ -d ~/.zshconf/post ]
then
    for file in ~/.zshconf/post/*; do
        source "$file"
    done
fi

_fix_cursor() {
    echo -ne "\e[5 q"
}

precmd_functions+=(_fix_cursor)

export BAT_THEME="Solarized (light)"
alias cat="bat"
alias rm="trash"
alias ta="tmux attach"
if test -n "$KITTY_INSTALLATION_DIR"; then
    export KITTY_SHELL_INTEGRATION="enabled"
    autoload -Uz -- "$KITTY_INSTALLATION_DIR"/shell-integration/zsh/kitty-integration
    kitty-integration
    unfunction kitty-integration
    alias icat="kitty +kitten icat"
    # alias ssh="kitty +kitten ssh"
fi
alias oil="nvim +Oil"
# git show tag
alias gdce="git describe --exact-match --tags"

# editor
export VISUAL="nvim"
export EDITOR="$VISUAL"
export NEOVIDE_MULTIGRID="true"
export SYSTEMD_EDITOR="$VISUAL"
# Defaults  env_keep += "SYSTEMD_EDITOR"

# fzf
[ -s ~/.fzf.zsh ] && source ~/.fzf.zsh
export FZF_DEFAULT_COMMAND="fd --type file --hidden --follow" # search all files
export FZF_CTRL_T_COMMAND="fd --type file --hidden --follow --exclude '.git/' --exclude 'kitex_gen/' --exclude '*.pb.go'" # search with exclude
export FZF_ALT_C_COMMAND="fd --type directory --exclude '.git/' --exclude 'kitex_gen/' --exclude 'thrift_gen/'"

# gopath & goroot settings
export GOROOT="$HOME/.gos/go"
export GOPATH="$HOME/code/gopath"
export PATH="$GOROOT/bin:$GOPATH/bin:$PATH" 

# params alias
unalias gco

_fzf_git_branch() {
    # get all branch
    git rev-parse HEAD > /dev/null 2>&1 || return

    git branch --color=always --all --sort=-committerdate |
        grep -v HEAD |
        fzf --height 50% --ansi --no-multi --preview-window right:65% \
        --preview 'git log -n 50 --color=always --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed "s/.* //" <<< {})' |
        sed "s/.* //"
}

gco() {
    # check in git respository
    git rev-parse HEAD > /dev/null 2>&1 || return

    # params count
    if (( $# > 0 )) ; then
        git checkout $*
        return
    fi

    local branch

    branch=$(_fzf_git_branch)
    if [[ "$branch" = "" ]]; then
        echo "No branch selected."
        return
    fi

    # If branch name starts with 'remotes/' then it is a remote branch. By
    # using --track and a remote branch name, it is the same as:
    # git checkout -b branchName --track origin/branchName
    if [[ "$branch" = 'remotes/'* ]]; then
        git checkout --track $branch
    else
        git checkout $branch;
    fi
}

neofetch() {
    echo "please use fastfetch"
    echo "please use fastfetch"
    echo "please use fastfetch"
    print -z fastfetch
}

lscwd() {
    proc="nvim"
    if (( $# > 0 )); then
        proc=$1
    fi
    procs=$(pidof $proc | tr ' ' ',')
    if  [[ "$procs" = "" ]] ; then
        echo "no $proc instance"
        return
    fi
    lsof -p $procs 2>&1 | grep -v "^lsof" | grep cwd | awk -F' ' '{printf "%s\t%s\n",$2,$9}'
}

# [ -s "$HOME/.acme.sh/acme.sh.env" ] && source "$HOME/.acme.sh/acme.sh.env"

# autoload -U compinit; compinit

eval "$(direnv hook zsh)"
# zprof
